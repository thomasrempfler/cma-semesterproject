---
title: "Red Deer Trajectories - A method for Segmentation into Seasonal Homeranges"
author: "Thomas Rempfler"
format:
  html:
    code-fold: true     # makes the code in the output collapsable
execute:
  warning: false        # hides warnings from the generated output
  message: false        # hides messages from the generated output
lang: en                # sets the document language to english. Switch to "de" if you write in german
crossref: 
 fig-title: '*Figure*'
 fig-labels: arabic
 title-delim: "*.*"
---



## Report should:

  1. be written in a scientific writing style. 
  2. around 15'000 characters, not exceed 20'000 (including spaces) 
  3. typically include text, maps, plots, appendices, code and references. 
  4. written using Quarto (see sample File in the template Repo)




<!-- ```{r setup, include=FALSE} -->
<!-- knitr::opts_chunk$set(echo = TRUE) -->
<!-- ``` -->


```{r, include=FALSE}
rm(list=ls())

```

```{r packages, include=FALSE}
# library(knitr)
library(tidyverse)
library(data.table)
library(lubridate)
library(sf)
library(gt)
library(ggplot2)
library(patchwork)
library(sfheaders)
# library(devtools)
# devtools::install_github("benmarwick/wordcountaddin",  type = "source", dependencies = TRUE)
library(wordcountaddin)
# library(plotly)

```

# Background
The existence of red deer (Cervus elaphus) is affected by feeding, reproduction and the avoidance of predators (Clutton-Brock, Guinness and Albon, 1982). The concept of the «landscape of fear» represents relative levels of predation risk as peaks and valleys that reflect the level of fear of predation a prey animal experiences in different parts of its home range (Laundré, Hernández and Ripple, 2010). Canadian studies on elk (Cervus elaphus canadensis) have shown that in human-dominated landscapes, effects on red deer behaviour caused by human disturbance exceed those of habitat and natural predators (Ciuti et al., 2012). Humans triggered increased vigilance and decreased foraging in elk. Human activity is identified as the strongest driver of red deer movement (Mumme et al., 2023). They highly respond to disturbance from human recreational activities by increasing their level of vigilance, but the nature of their response varies with the level of cover available, and they perceive hunting as a more acute threat than human recreation (Jayakody et al., 2008). Even red deer which appear to be habituated to regular disturbance within their home territory may alter their behaviour and avoid hiking trails (Sibbald et al., 2011). As human activity is mainly concentrated on daytime, red deer can alter their diurnal behaviour, avoid humans during the day and compensate with activity at night (Godvik et al., 2009; Coppes et al., 2017).
Red deer populations in highly seasonal environments show partial migration, meaning that there are migratory and resident individuals in one population, but the proportion can vary between populations (Mysterud et al., 2011). Habitat selection of red deer in montane to alpine habitats depends on the stage of green-up, the migrant strategy, landscape characteristics and human presence (Sigrist et al., 2022). During the green-up season migratory individuals have access to higher quality forage than resident. In addition, red deer prefer flat terrain, lower elevation and higher solar radiation, but avoid habitats with possible exposure to human activity, i.e. small distance to roads and trails, great distance to forest or light shrub cover. The onset of hunting triggers stronger fear reactions in red deer, i.e. increased flight initiation distance, increased time spent outside the home range and preference for dense resting sites, what may affect red deer distribution and harvesting efficiency (Meisingset et al., 2022). To protect red deer from hunting and from human disturbance authorities and managers in the Alps designate different types of hunting ban areas (HBA), while the evidence of their effect on red deer behaviour and habitat selection is lacking. However, the arrangement of multiple HBA’s per study area offers an experimental study design to compare habitat selection inside versus outside HBA.


Fellmann...
Even though there have been developed several methods to classify migration behaviour of red deer I want to test a self developed method. 


# Methods
We have GPS locations of red deer in six study areas (fig. 1). For the development of the method I concentrated on only 1 individual. The next step would be to apply the method to many individuals. 


## Data description





### Static and moving phases of trajectories

With the calculation of mean steps in a window of 30 days, at the beginning and in the end of the individual trajectories incomplete steps were generated which I have removed.



```{r, data, include=FALSE}
# load data of all individuals
locs <- fread("C:/Users/trempfler/Desktop/r_cma/semester_project/cma-semesterproject/data/locs_migration.csv") |> 
  st_as_sf(coords = c("x", "y"), crs = 2056, remove = FALSE)

```


```{r, function_seg_id, include=FALSE}
# function to number trajectory segments
rle_id <- function(vec) {
    x <- rle(vec)$lengths
    as.factor(rep(seq_along(x), times = x))
}

```

Diskussion:
- Problem year, weil dann neues mcp im Übergang zum Jahreswechsel
- mcp merge

```{r, vars, include=FALSE}
# select 1 example individual (deployment) and set threshold of the step mean of 30 days to 75 % quantile
depl_1_q75 <- locs |>  
  group_by(deployment) |> 
  filter(deployment == "9919379_20211") |> 
  filter(in_range == TRUE) |> 
  mutate(Migration = stepMean30 > quantile(stepMean30, probs = .75)) %>% 
  mutate(seg_id = rle_id(Migration)) |> 
  mutate(year = year(t)) |> 
  select(loc_nr, id, x, y, t, year, stepMean30, in_range, seg_id, Migration) |> 
  ungroup()

# calculate convex hull of 75 % quantile
ch_depl_1_q75 <- depl_1_q75  |>  
  filter(!Migration) |> 
  group_by(year, seg_id) |> 
  summarise() |>  
  st_convex_hull() |> 
  ungroup()


# select 1 example individual (deployment) and set threshold of the step mean of 30 days to 90 % quantile
depl_1_q90 <- locs |>  
  group_by(deployment) |> 
  filter(deployment == "9919379_20211") |> 
  filter(in_range == TRUE) |> 
  mutate(Migration = stepMean30 > quantile(stepMean30, probs = .9)) %>% 
  mutate(seg_id = rle_id(Migration)) |> 
  mutate(year = year(t)) |> 
  select(loc_nr, id, x, y, t, year, stepMean30, in_range, seg_id, Migration) |> 
  ungroup()

# calculate convex hull
ch_depl_1_q90 <- depl_1_q90  |>  
  filter(!Migration) |> 
  group_by(year, seg_id) |> 
  summarise() |>  
  st_convex_hull() |> 
  ungroup()


# select 1 example individual (deployment) and set threshold of the step mean of 30 days to 95 % quantile
depl_1_q95 <- locs |>  
  group_by(deployment) |> 
  filter(deployment == "9919379_20211") |> 
  filter(in_range == TRUE) |> 
  mutate(Migration = stepMean30 > quantile(stepMean30, probs = .95)) %>% 
  mutate(seg_id = rle_id(Migration)) |> 
  mutate(year = year(t)) |> 
  select(loc_nr, id, x, y, t, year, stepMean30, in_range, seg_id, Migration) |> 
  ungroup()

# calculate convex hull
ch_depl_1_q95 <- depl_1_q95  |>  
  filter(!Migration) |> 
  group_by(year, seg_id) |> 
  summarise() |>  
  st_convex_hull() |> 
  ungroup()

```

## Migrating vs. non-migrating individuals

The calculation of mean steps in a window of 30 days for each location (location now - 15 days to now + 15 days) resulted in step mean thresholds of `r as.integer(quantile(depl_1_q75$stepMean30, probs = .75))` for a 75 % quantile, `r as.integer(quantile(depl_1_q90$stepMean30, probs = .9))` for a 90 % quantile and `r as.integer(quantile(depl_1_q95$stepMean30, probs = .95))` for a 95 % quantile and .

Vorteile:
- Start nicht abhängig von einem gesetzten Starttermin (!= Ursula: 1. März)

Nachteile:
- Verlust der ersten und letzten 15 Tage
- Viele Segmente (!= Ursula)

```{r, plot_vars, include=FALSE}

# plot quantile 75 %
p_q75 <- depl_1_q75 %>% 
  ggplot(aes(x, y)) + 
  geom_path() +
  geom_point(aes(x, y, pch = Migration), size = 1.5) +
  facet_wrap(~ year)  + 
  geom_sf(data = ch_depl_1_q75, fill = "red", alpha = .4, inherit.aes = FALSE) +
  coord_sf(datum = sf::st_crs(2056)) +
  xlab("East (LV95)") +
  ylab("North (LV95)") +
  ggtitle("Migrating and static segments with a 75 % quantile threshold of step means")
p_q75

# plot quantile 90 %
p_q90 <- depl_1_q90 %>% 
  ggplot(aes(x, y)) + 
  geom_path() +
  geom_point(aes(x, y, shape = Migration), size = 1.5) +
  facet_wrap(~ year)  + 
  geom_sf(data = ch_depl_1_q90, fill = "red", alpha = .4, inherit.aes = FALSE) +
  coord_sf(datum = sf::st_crs(2056)) +
  xlab("East (LV95)") +
  ylab("North (LV95)") +
  ggtitle("Migrating and static segments with a 90 % quantile threshold of step means")
p_q90

# plot quantile 95 %
p_q95 <- depl_1_q95 %>% 
  ggplot(aes(x, y)) + 
  geom_path() +
  geom_point(aes(x, y, pch = Migration), size = 1.5) +
  facet_wrap(~ year)  + 
  geom_sf(data = ch_depl_1_q95, fill = "red", alpha = .4, inherit.aes = FALSE) +
  coord_sf(datum = sf::st_crs(2056)) +
  xlab("East (LV95)") +
  ylab("North (LV95)") +
  ggtitle("Migrating and static segments with a 95 % quantile threshold of step means")
p_q95

```


```{r, fig-plot1, warning=FALSE, echo=FALSE, fig.cap="*Classification of yearly trajectories into migrating and static segments with quantile thresholds of step means of 75 % (A), 90 % (B) and 95 % (C).*", fig.height = 18, fig.width = 14}

# plot 3 variants
plot1 <- p_q75 / p_q90 / p_q95
plot1 + 
  plot_layout(guides = "collect") +
  plot_annotation(tag_levels = "A") &
  theme(plot.tag = element_text(size = 12))

```


```{r, fig-plot2, warning=FALSE, echo=FALSE, fig.cap="*Yearly migrating and static segments of the trajectories with a quantile thresholds of step means of 95%.*", fig.height = 6, fig.width = 14}

# union overlaying c_hulls
ch_union90 <- ch_depl_1_q90 |> 
  group_by(year) |>
  summarize(geometry = st_union(geometry)) |> 
  ungroup()

# loop through multipolygons to create spatially independent polygons and buffer
ch_year <- NULL

for (y in unique(ch_union90$year)){
  
  # filter for years
  ch_year_temp <- ch_union90 |> 
    filter(year == y) |> 
    st_cast("POLYGON") |> 
    st_buffer(1000)

  # append
  ch_year <- bind_rows(ch_year, ch_year_temp)
}

ch_year <-  ch_year |> 
  mutate(ch_id = row_number())

# plot 90 % quantile with 1000 m buffer per year
plot2 <- depl_1_q90 %>% 
  ggplot(aes(x, y)) + 
  geom_path() +
  geom_point(aes(x, y, pch = Migration), size = 1.5) +
  facet_wrap(~ year)  + 
  geom_sf(data = ch_year, fill = "red", alpha = .4, inherit.aes = FALSE) +
  coord_sf(datum = sf::st_crs(2056)) +
  xlab("East (LV95)") +
  ylab("North (LV95)") +
  ggtitle("Unioned and buffered convex hulls with trajectory segments classified by migration state")
plot2

```


```{r, fig-plot3, warning=FALSE, echo=FALSE, fig.cap="*Yearly migration segments of the trajectories, but instead of only seasonal migrations, with excurions included.*", fig.height = 6, fig.width = 14}

# loop intersect locs with ch_year
locs_ch_year <- NULL

for (j in unique(depl_1_q90$year)){

  # filter locs by year
  # j<-2019; i<-2
  depl_1_q90_temp <- depl_1_q90 |> 
    filter(year == j)
  
  for (i in unique(ch_year$ch_id)){
    
    # filter ch_year by id and year
    loc_ch_year_temp <- ch_year %>%
      filter(year == j) |>
      filter(ch_id == i) |> 
      st_intersection(depl_1_q90_temp)

    # append
    locs_ch_year <- bind_rows(locs_ch_year, loc_ch_year_temp)
  }
}

# remove locs inside ch_year to get locs of mig
locs_mig <- depl_1_q90 |> 
  filter(!loc_nr %in% locs_ch_year$loc_nr)

# plot migration segments with ch_year
plot3 <- locs_mig %>% 
  ggplot(aes(x, y)) + 
  geom_path(aes(colour = seg_id), linewidth = 1) +
  geom_point(aes(x, y), size = 1.5) +
  facet_wrap(~ year)  + 
  geom_sf(data = ch_year, fill = "red", alpha = .4, inherit.aes = FALSE) +
  coord_sf(datum = sf::st_crs(2056)) +
  xlab("East (LV95)") +
  ylab("North (LV95)") +
  ggtitle("Trajectory segments and the seasonal home ranges")
plot3

```


```{r, seg_mig, include=FALSE}
# filter for migration segments
locs_mig2 <- locs_mig |> 
  group_by(seg_id) |> 
  mutate(seg_start = min(t),
         seg_end = max(t)) |> 
  filter(t %in% c(seg_start, seg_end)) |> 
  mutate(n_seg = n()) |> 
  filter(n_seg > 1) |> 
  ungroup()

# calculate distance between start and end location of the segment
seg_dist <- NULL

for (s in unique(locs_mig2$seg_id)){
    
    # filter for data of current loop run
    seg_start <- locs_mig2 |> 
      filter(seg_id == s) |> 
      filter(t == seg_start)
    
    seg_end <- locs_mig2 |> 
      filter(seg_id == s) |> 
      filter(t == seg_end) 
    
    # calculate and append distance from start to end in segment
    seg_start$start_end_dist <- st_distance(seg_start, seg_end) |>  as.numeric()

    # append
    seg_dist <- bind_rows(seg_dist, seg_start)
    
  }


# remove distances from start to end < 2000 m to get only the migration segments
seg_mig_temp <- seg_dist |> 
  filter(start_end_dist > 2000) |> 
  dplyr::select(id, year, seg_id, seg_start, seg_end, start_end_dist) |> 
  sf_to_df(fill = TRUE) |> 
  dplyr::select(-c(sfg_id, point_id, x, y)) 
  
# join attributes to the final migration segments
seg_mig <- locs_mig |> 
  filter(seg_id %in% seg_mig_temp$seg_id) |> 
  left_join(seg_mig_temp, by = c("id", "year", "seg_id")) |> 
  rename(Segment = seg_id) |> 
  mutate(Season = case_when(month(seg_start) < 7 ~ "Spring",
                            TRUE ~ "Autumn"))
  
```

```{r, fig-plot4, warning=FALSE, echo=FALSE, fig.cap="*Yearly seasonal migrations and home ranges, without excursions.*", fig.height = 6, fig.width = 14}

# plot migration segments with ch_year
plot4 <- seg_mig %>% 
  ggplot(aes(x, y)) + 
  geom_path(aes(colour = Season), linewidth = 1) +
  geom_point(aes(x, y), size = 1.5) +
  facet_wrap(~ year)  + 
  geom_sf(data = ch_year, fill = "red", alpha = .4, inherit.aes = FALSE) +
  coord_sf(datum = sf::st_crs(2056)) +
  xlab("East (LV95)") +
  ylab("North (LV95)") +
  ggtitle("Seasonal migrations")
plot4

```

